<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="cs" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#
string pathFragment = ControllerRootName.ToLowerInvariant();
#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using SousChef.Data;
using SousChef.Models;
using SousChef.Classes;

namespace <#= Namespace #>
{
    /// <summary>
    /// <#= ControllerRootName #> Controller - Basic CRUD for <#= ControllerRootName #>
    /// </summary>
    public class <#= ControllerName #> : BaseStaffingController
    {

        // GET api/<#= ControllerRootName #>/
        /// <summary>
        /// An iQueryable <#= ControllerRootName #> lookup
        /// </summary>
        /// <returns>
        /// 200 - Success + A list of <#= ControllerRootName #>
        /// 401 - Not Authorized 
        /// 500 - Internal Server Error + Exception
        /// </returns>
        public IQueryable<<#= ControllerRootName #>Model> Get()
        {
            return Db.<#= ControllerRootName #>s.Select(o => new <#= ControllerRootName #>Model
            {
                // TODO: Projection into DTO
            });
        }

        // GET api/<#= ControllerRootName #>/5
        /// <summary>
        /// Retrieve a single <#= ControllerRootName #> from the database.
        /// </summary>
        /// <param name="id">The <#= ControllerRootName #>Id of the <#= ControllerRootName #> to return.</param>
        /// <returns>
        /// 200 - Success + The requested <#= ControllerRootName #>.
        /// 401 - Not Authorized 
        /// 404 - Not Found + Reason
        /// </returns>
		[ResponseType(typeof(<#= ControllerRootName #>Model))]
		public IHttpActionResult Get(int id)
        {
            <#= ControllerRootName #>Model <#= pathFragment #> = Get().FirstOrDefault<<#= ControllerRootName #>Model>(o => o.id == id);
            if (<#= pathFragment #> == null)
            {
                return this.NotFound("<#= ControllerRootName #> not found.");
            }

            return Ok(<#= pathFragment #>);
        }

        // PUT api/<#= ControllerRootName #>/5
        /// <summary>
        /// Save changes to a single <#= ControllerRootName #> to the database.
        /// </summary>
        /// <param name="id">The <#= ControllerRootName #>Id of the <#= ControllerRootName #> to save.</param>
        /// <param name="<#= pathFragment #>Model">The model of the edited <#= ControllerRootName #></param>
        /// <returns>
        /// 204 - No Content
        /// 400 - Bad Request + (Invalid Model State)
        /// 401 - Not Authorized 
        /// 404 - Not Found + Reason
        /// 500 - Internal Server Error + Exception
        /// </returns>
        public IHttpActionResult Put(int id, <#= ControllerRootName #>Model <#= pathFragment #>Model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != <#= pathFragment #>Model.id)
            {
                return BadRequest();
            }

            try
            {
				// TODO: Retrieve and update a <#= ControllerRootName #>
                <#= ControllerRootName #> <#= pathFragment #> = Db.<#= ControllerRootName #>s.FirstOrDefault(o => o.id == id);
				if (<#= pathFragment #> == null)
                    throw new APIException("<#= ControllerRootName #> not found.", 404);
				// ... set field values
                Db.Entry(<#= pathFragment #>).State = EntityState.Modified;
                Db.SaveChanges();
                return StatusCode(HttpStatusCode.NoContent);
            }
            catch (APIException ex)
            {
                if (ex.code == 404)
                    return this.NotFound(ex.message);
                else
                    return this.InternalServerError(ex);
            }
            catch (Exception e)
            {
                return this.InternalServerError(e);
            }
        }

        // POST api/<#= ControllerRootName #>/
        /// <summary>
        /// A new <#= ControllerRootName #> to be added.
        /// </summary>
        /// <param name="<#= pathFragment #>Model">The new <#= ControllerRootName #></param>
        /// <returns>
        /// 201 - Created + The new <#= ControllerRootName #>
        /// 400 - Bad Request + (Invalid Model State)
        /// 401 - Not Authorized 
        /// 404 - Not Found + Reason
        /// 500 - Internal Server Error + Exception
        /// </returns>
		[ResponseType(typeof(<#= ControllerRootName #>Model))]
		public IHttpActionResult Post(<#= ControllerRootName #>Model <#= pathFragment #>Model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
				// TODO: Create and populate new <#= ControllerRootName #>
                <#= ControllerRootName #> <#= pathFragment #> = new <#= ControllerRootName #>();
                // ... set field values
				Db.<#= ControllerRootName #>s.Add(<#= pathFragment #>);
                Db.SaveChanges();

                <#= pathFragment #>Model.id = <#= pathFragment #>.id;

                return CreatedAtRoute("DefaultApi", new { id = <#= pathFragment #>.id }, <#= pathFragment #>Model);
            }
            catch (APIException ex)
            {
                if (ex.code == 404)
                    return this.NotFound(ex.message);
                else
                    return this.InternalServerError(ex);
            }
            catch (Exception e)
            {
                return this.InternalServerError(e);
            }
        }

        // DELETE api/<#= ControllerRootName #>/5
        /// <summary>
        /// Delete a <#= ControllerRootName #> from the database.
        /// </summary>
        /// <param name="id">The <#= ControllerRootName #>Id of the <#= ControllerRootName #> to delete.</param>
        /// <returns>
		/// 200 - Success + The deleted <#= ControllerRootName #> 
		/// 401 - Not Authorized 
        /// 405 - Method Not Allowed
		/// 500 - Internal Server Error + the Exception
        /// </returns>
		[ResponseType(typeof(<#= ControllerRootName #>Model))]
		public IHttpActionResult Delete(int id)
        {
            try {
				// For Objects which cannot be deleted:
				// return StatusCode(HttpStatusCode.MethodNotAllowed);  // Update Return Codes
				<#= ControllerRootName #> <#= pathFragment #> = Db.<#= ControllerRootName #>s.Find(id);
				if (<#= pathFragment #> == null)
				{
					return this.NotFound("<#= ControllerRootName #> not found.");
				}

                <#= ControllerRootName #>Model returnModel = Get().FirstOrDefault<<#= ControllerRootName #>Model>(o => o.id == id);
                Db.<#= ControllerRootName #>s.Remove(<#= pathFragment #>);
                Db.SaveChanges();

                return Ok(returnModel);
            }
            catch (Exception e)
            {
                return InternalServerError(e);
            }
        }
    }
}
