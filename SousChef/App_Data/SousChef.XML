<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SousChef</name>
    </assembly>
    <members>
        <member name="M:SousChef.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:SousChef.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:SousChef.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action. 
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action. 
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action. 
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action. 
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,SousChef.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:SousChef.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:SousChef.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:SousChef.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SousChef.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:SousChef.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:SousChef.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:SousChef.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:SousChef.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:SousChef.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:SousChef.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SousChef.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,SousChef.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,SousChef.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:SousChef.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:SousChef.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create one using <see cref="T:SousChef.Areas.HelpPage.ObjectGenerator"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},SousChef.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="P:SousChef.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:SousChef.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:SousChef.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="T:SousChef.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:SousChef.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleKey.#ctor(SousChef.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:SousChef.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:SousChef.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:SousChef.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:SousChef.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,SousChef.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:SousChef.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:SousChef.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:SousChef.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:SousChef.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:SousChef.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:SousChef.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:SousChef.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:SousChef.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:SousChef.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:SousChef.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:SousChef.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SousChef.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:SousChef.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:SousChef.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:SousChef.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:SousChef.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:SousChef.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:SousChef.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:SousChef.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SousChef.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:SousChef.Classes.ActionResultWithText">
            <summary>
            IHttpActionResult wrapper which includes a message for those that do not inherently support it.
            </summary>
        </member>
        <member name="T:SousChef.Classes.ApiControllerExtensions">
            <summary>
            Add extension methods here for each base type you would like to add messaging to.
            </summary>
        </member>
        <member name="M:SousChef.Classes.ApiControllerExtensions.NotFound(System.Web.Http.ApiController,System.String)">
            <summary>
            Standard NotFound response with added message
            </summary>
            <param name="controller"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:SousChef.Controllers.InventoryController">
            <summary>
            Inventory Controller - Basic CRUD for Inventory
            </summary>
        </member>
        <member name="M:SousChef.Controllers.InventoryController.Get">
            <summary>
            An iQueryable Inventory lookup
            </summary>
            <returns>
            200 - Success + A list of Inventory
            401 - Not Authorized 
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryController.Get(System.Int32)">
            <summary>
            Retrieve a single Inventory from the database.
            </summary>
            <param name="id">The InventoryId of the Inventory to return.</param>
            <returns>
            200 - Success + The requested Inventory.
            401 - Not Authorized 
            404 - Not Found + Reason
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryController.Put(System.Int32,SousChef.Models.InventoryModel)">
            <summary>
            Save changes to a single Inventory to the database.
            </summary>
            <param name="id">The InventoryId of the Inventory to save.</param>
            <param name="inventoryModel">The model of the edited Inventory</param>
            <returns>
            204 - No Content
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryController.Post(SousChef.Models.InventoryModel)">
            <summary>
            A new Inventory to be added.
            </summary>
            <param name="inventoryModel">The new Inventory</param>
            <returns>
            201 - Created + The new Inventory
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryController.Delete(System.Int32)">
            <summary>
            Delete a Inventory from the database.
            </summary>
            <param name="id">The InventoryId of the Inventory to delete.</param>
            <returns>
            200 - Success + The deleted Inventory 
            401 - Not Authorized 
            405 - Method Not Allowed
            500 - Internal Server Error + the Exception
            </returns>
        </member>
        <member name="T:SousChef.Controllers.InventoryUserController">
            <summary>
            InventoryUser Controller - Basic CRUD for InventoryUser
            </summary>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserController.Get">
            <summary>
            An iQueryable InventoryUser lookup
            </summary>
            <returns>
            200 - Success + A list of InventoryUser
            401 - Not Authorized 
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserController.Get(System.Int32)">
            <summary>
            Retrieve a single InventoryUser from the database.
            </summary>
            <param name="id">The InventoryUserId of the InventoryUser to return.</param>
            <returns>
            200 - Success + The requested InventoryUser.
            401 - Not Authorized 
            404 - Not Found + Reason
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserController.Put(System.Int32,SousChef.Models.InventoryUserModel)">
            <summary>
            Save changes to a single InventoryUser to the database.
            </summary>
            <param name="id">The InventoryUserId of the InventoryUser to save.</param>
            <param name="inventoryuserModel">The model of the edited InventoryUser</param>
            <returns>
            204 - No Content
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserController.Post(SousChef.Models.InventoryUserModel)">
            <summary>
            A new InventoryUser to be added.
            </summary>
            <param name="inventoryuserModel">The new InventoryUser</param>
            <returns>
            201 - Created + The new InventoryUser
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserController.Delete(System.Int32)">
            <summary>
            Delete a InventoryUser from the database.
            </summary>
            <param name="id">The InventoryUserId of the InventoryUser to delete.</param>
            <returns>
            200 - Success + The deleted InventoryUser 
            401 - Not Authorized 
            405 - Method Not Allowed
            500 - Internal Server Error + the Exception
            </returns>
        </member>
        <member name="T:SousChef.Controllers.InventoryUserSourceController">
            <summary>
            InventoryUserSource Controller - Basic CRUD for InventoryUserSource
            </summary>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserSourceController.Get">
            <summary>
            An iQueryable InventoryUserSource lookup
            </summary>
            <returns>
            200 - Success + A list of InventoryUserSource
            401 - Not Authorized 
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserSourceController.Get(System.Int32)">
            <summary>
            Retrieve a single InventoryUserSource from the database.
            </summary>
            <param name="id">The InventoryUserSourceId of the InventoryUserSource to return.</param>
            <returns>
            200 - Success + The requested InventoryUserSource.
            401 - Not Authorized 
            404 - Not Found + Reason
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserSourceController.Put(System.Int32,SousChef.Models.InventoryUserSourceModel)">
            <summary>
            Save changes to a single InventoryUserSource to the database.
            </summary>
            <param name="id">The InventoryUserSourceId of the InventoryUserSource to save.</param>
            <param name="inventoryusersourceModel">The model of the edited InventoryUserSource</param>
            <returns>
            204 - No Content
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserSourceController.Post(SousChef.Models.InventoryUserSourceModel)">
            <summary>
            A new InventoryUserSource to be added.
            </summary>
            <param name="inventoryusersourceModel">The new InventoryUserSource</param>
            <returns>
            201 - Created + The new InventoryUserSource
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.InventoryUserSourceController.Delete(System.Int32)">
            <summary>
            Delete a InventoryUserSource from the database.
            </summary>
            <param name="id">The InventoryUserSourceId of the InventoryUserSource to delete.</param>
            <returns>
            200 - Success + The deleted InventoryUserSource 
            401 - Not Authorized 
            405 - Method Not Allowed
            500 - Internal Server Error + the Exception
            </returns>
        </member>
        <member name="T:SousChef.Controllers.ItemController">
            <summary>
            Item Controller - Basic CRUD for Item
            </summary>
        </member>
        <member name="M:SousChef.Controllers.ItemController.Get">
            <summary>
            An iQueryable Item lookup
            </summary>
            <returns>
            200 - Success + A list of Item
            401 - Not Authorized 
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ItemController.Get(System.Int32)">
            <summary>
            Retrieve a single Item from the database.
            </summary>
            <param name="id">The ItemId of the Item to return.</param>
            <returns>
            200 - Success + The requested Item.
            401 - Not Authorized 
            404 - Not Found + Reason
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ItemController.Put(System.Int32,SousChef.Models.ItemModel)">
            <summary>
            Save changes to a single Item to the database.
            </summary>
            <param name="id">The ItemId of the Item to save.</param>
            <param name="itemModel">The model of the edited Item</param>
            <returns>
            204 - No Content
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ItemController.Post(SousChef.Models.ItemModel)">
            <summary>
            A new Item to be added.
            </summary>
            <param name="itemModel">The new Item</param>
            <returns>
            201 - Created + The new Item
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ItemController.Delete(System.Int32)">
            <summary>
            Delete a Item from the database.
            </summary>
            <param name="id">The ItemId of the Item to delete.</param>
            <returns>
            200 - Success + The deleted Item 
            401 - Not Authorized 
            405 - Method Not Allowed
            500 - Internal Server Error + the Exception
            </returns>
        </member>
        <member name="T:SousChef.Controllers.PostmanController">
            <summary>
            Serialize the API to a Postman-importable format
            </summary>
        </member>
        <member name="M:SousChef.Controllers.PostmanController.GetPostmanAPI">
            <summary>
            Return a map of all API calls crawled by the ApiExplorer
            </summary>
            <returns></returns>
        </member>
        <member name="T:SousChef.Controllers.ReceiptController">
            <summary>
            Receipt Controller - Basic CRUD for Receipt
            </summary>
        </member>
        <member name="M:SousChef.Controllers.ReceiptController.Get">
            <summary>
            An iQueryable Receipt lookup
            </summary>
            <returns>
            200 - Success + A list of Receipt
            401 - Not Authorized 
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ReceiptController.Get(System.Int32)">
            <summary>
            Retrieve a single Receipt from the database.
            </summary>
            <param name="id">The ReceiptId of the Receipt to return.</param>
            <returns>
            200 - Success + The requested Receipt.
            401 - Not Authorized 
            404 - Not Found + Reason
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ReceiptController.Put(System.Int32,SousChef.Models.ReceiptModel)">
            <summary>
            Save changes to a single Receipt to the database.
            </summary>
            <param name="id">The ReceiptId of the Receipt to save.</param>
            <param name="receiptModel">The model of the edited Receipt</param>
            <returns>
            204 - No Content
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ReceiptController.Post(SousChef.Models.ReceiptModel)">
            <summary>
            A new Receipt to be added.
            </summary>
            <param name="receiptModel">The new Receipt</param>
            <returns>
            201 - Created + The new Receipt
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ReceiptController.Delete(System.Int32)">
            <summary>
            Delete a Receipt from the database.
            </summary>
            <param name="id">The ReceiptId of the Receipt to delete.</param>
            <returns>
            200 - Success + The deleted Receipt 
            401 - Not Authorized 
            405 - Method Not Allowed
            500 - Internal Server Error + the Exception
            </returns>
        </member>
        <member name="T:SousChef.Controllers.ReceiptItemController">
            <summary>
            ReceiptItem Controller - Basic CRUD for ReceiptItem
            </summary>
        </member>
        <member name="M:SousChef.Controllers.ReceiptItemController.Get">
            <summary>
            An iQueryable ReceiptItem lookup
            </summary>
            <returns>
            200 - Success + A list of ReceiptItem
            401 - Not Authorized 
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ReceiptItemController.Get(System.Int32)">
            <summary>
            Retrieve a single ReceiptItem from the database.
            </summary>
            <param name="id">The ReceiptItemId of the ReceiptItem to return.</param>
            <returns>
            200 - Success + The requested ReceiptItem.
            401 - Not Authorized 
            404 - Not Found + Reason
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ReceiptItemController.Put(System.Int32,SousChef.Models.ReceiptItemModel)">
            <summary>
            Save changes to a single ReceiptItem to the database.
            </summary>
            <param name="id">The ReceiptItemId of the ReceiptItem to save.</param>
            <param name="receiptitemModel">The model of the edited ReceiptItem</param>
            <returns>
            405 - Method Not Allowed
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ReceiptItemController.Post(SousChef.Models.ReceiptItemModel)">
            <summary>
            A new ReceiptItem to be added.
            </summary>
            <param name="receiptitemModel">The new ReceiptItem</param>
            <returns>
            201 - Created + The new ReceiptItem
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.ReceiptItemController.Delete(System.Int32)">
            <summary>
            Delete a ReceiptItem from the database.
            </summary>
            <param name="id">The ReceiptItemId of the ReceiptItem to delete.</param>
            <returns>
            200 - Success + The deleted ReceiptItem 
            401 - Not Authorized 
            405 - Method Not Allowed
            500 - Internal Server Error + the Exception
            </returns>
        </member>
        <member name="T:SousChef.Controllers.SourceController">
            <summary>
            Source Controller - Basic CRUD for Source
            </summary>
        </member>
        <member name="M:SousChef.Controllers.SourceController.Get">
            <summary>
            An iQueryable Source lookup
            </summary>
            <returns>
            200 - Success + A list of Source
            401 - Not Authorized 
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.SourceController.Get(System.Int32)">
            <summary>
            Retrieve a single Source from the database.
            </summary>
            <param name="id">The SourceId of the Source to return.</param>
            <returns>
            200 - Success + The requested Source.
            401 - Not Authorized 
            404 - Not Found + Reason
            </returns>
        </member>
        <member name="M:SousChef.Controllers.SourceController.Put(System.Int32,SousChef.Models.SourceModel)">
            <summary>
            Save changes to a single Source to the database.
            </summary>
            <param name="id">The SourceId of the Source to save.</param>
            <param name="sourceModel">The model of the edited Source</param>
            <returns>
            204 - No Content
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.SourceController.Post(SousChef.Models.SourceModel)">
            <summary>
            A new Source to be added.
            </summary>
            <param name="sourceModel">The new Source</param>
            <returns>
            201 - Created + The new Source
            400 - Bad Request + (Invalid Model State)
            401 - Not Authorized 
            404 - Not Found + Reason
            500 - Internal Server Error + Exception
            </returns>
        </member>
        <member name="M:SousChef.Controllers.SourceController.Delete(System.Int32)">
            <summary>
            Delete a Source from the database.
            </summary>
            <param name="id">The SourceId of the Source to delete.</param>
            <returns>
            200 - Success + The deleted Source 
            401 - Not Authorized 
            405 - Method Not Allowed
            500 - Internal Server Error + the Exception
            </returns>
        </member>
    </members>
</doc>
